******************

PLEASE READ

******************

AppDelegate.m is currently bypassing all SSL certificate checks. Please uncomment lines for
device to check ssl certificates before trusting the server.

******************



Some feature supported by the app that are NOT yet supported by web app

1. In table question, app supports not being able to enter a value in a cell
    Some of the questions we looked at had no cells in tables, this is reporoduce
    that. 
    In the app the cells that should not be filled up have a red boundary instead of black.
    The app gets this list of cells from the json. The json key is 'noCells'
    Currently the webapp does not provide this key and hence the app cannot use this feature
    
2. In mMultiple choice question, app supports any number of options.
    Currently the web app only supports 5 options 
    If the web app is changed to include how many number, the ipad shoudl be able to display all of them
    without any change.
    
3. In multiple choice question, app has the functionality to select more than one answer
    Currently the web app does not provide the user to add this to the question when created.
    APp gets this in the json. Key in json is 'Max-answers'. If the value is 1 then only
    1 answer is selectable and if it is 0 then multiple are selected.



About LDAP

The project uses the 'openLDAP' project for iOS on github
    https://github.com/bindle/iOSPorts

The steps to import the project can be found on github itself.


Currently, the project just uses modified versions ldapTest.h and ldapTest.m files provided in 
the github project to perform authentication. ldapTest supports many different types of 
authentication configurations and they performed authentication with all configurations.
All except for one configuration is commented out to perform authentication to our servers.
Depending on the server settings, an appropriate configuration would need to be selected.

A new method was added in this file which was almost exactly the same as the ones they provided
but instead of prinitng the output to console, the method saves the entire to a string and returns 
the string. The calling method then checks what the string contains and processes accordingly.


'PerformLdapAuthentication' is a class that has 2 static methods. 'LoginController' calls the authentication
method in 'PerformLdapAuthentication'. The ldap url is saved in the 'MIApp=Info.plist' and accessed when needed.
The username and password for the user is accessed from 'QuestionList'. When the user clicks on login, the username 
and password is saved in a static instance of 'QuestionList', accessed from anywhere in the app. The method then calls
the new method created in 'ldapTest' and performs actual authenticaion. 

** All configuration is saved in the plist and accessed as needed **



About MIApp-Info.plist

Information about plist 
http://en.wikipedia.org/wiki/Property_list

Plist in the app is used to save all static strings to provide ease of use changes. It may be easier to explain
with an example - 

Currently the information for forms (Backend API) is accessible at "https://aws.gursimran.net:8080/getMITemplateNames".
Same way there are urls for posting completed forms, retrieving one particular form and all other things.
It would be very time consuming to replace the urls everywhere and also it is very easity to overlook at some place.
So instead the app stores this information in the plist. The url is broken into parts, one is the domain 
(https://aws.gursimran.net), second is the port number (8080), third is the location on the server (getMITemplateNames).
These values are stored as key-value pairs. The app can access the values with the keys whenever wherever needed.
Now whenever the app wants to access the API, it can access the values and combine it to an URL. 
When a URL needs to be changed, the only place that is needed to be changed is in the plist. Since the app
reads the plist when it wants to access, there is also no need to recompile the app once something is changed. 

The plist also stores keys for the MI template. All json keys are stored in the plist. Again when needed and only need to
be changed here instead of everywhere in the app.

The plist also saves for how long incomplete forms can be left. This value is in days. So if the value is 7 as it is 
right now, any form that is older than 7 days and still hasn't been completed would be deleted. 

Notification settings are also saved in the plist. The value for this is an array. Every element in the array,
is days after creation when notifications should be sent. If the array has 1 & 2, notifications will be sent 1 day and 2 days
after creation and not 1 and 2 days before expiration. Apple only allows for a maximum of 64 local notifications to be
saved at a time in the app. So it is advised to have as limited notifications as possible for every form.



About KeyList

This class has a static instance that is again accessible from anywhere in the app. This class is used for 
accessing the plist values.



About QuestionList

This is class has a static instance that is again accessible from anywhere in the app. The class saves the Form
being completed, user logged in, users' password, users' document path and all these details.



Folder hierarchy


This is how the app file structure looks like

-MIApp
    -Document Folder
        -Completed Mis Folder (completed folder, forms need to be reviewed by foreman)
            -User Folder
                -MI Folder
                    -form file
                    -media files
        -Error Folder (error files)
            -user file
        -User folder (incomplete forms)
            -form folder
                -form file
                -media files



Detailed Step by Step how the app works

1. App launched
    -Check for every user which all forms are older than expiration date
    -delete those forms
    -is users folder is empty then delete it
    -or any other folder for that matter
    -display root controller (LogInController)
2. User logs in as technician
    -user enters username and password
    -user selects login
        -username and password is saved in QuestionList
        -authentication method in 'PerformLdapAuthentication' called
        -if failed display error
        -if successful show next controller (FormSelectionViewController)
        -download the formlist and display all available forms to user
            -a formlist object is created (FormList)
                -contains all information about forms that are available on the server that the user
                can fill
        -read all incomplete forms for this user and display those
3. User selects a form to fill up
    -open form (Download Form Data)
        -if new form is selected
            -download new form and display
        -if an incomplete form is selected
            -open file and display form
        -form is saved in QuestionList
        -first question is loaded (DisplayQuestionType, DisplayMultipleChoiceQuestionType, DisplayTrueFalseQuestionType,
        DisplayShortAnswerQuestionType, DisplayTableQuestionType)
            -the form is read and the first question type if found
        -for every view a media button is attached, comment box, next question button, back button,
            'X' button and info button
            -media button lets the user attach media for that specific question (Media Attachment - uses many other classes)
                -media files for each question are name Qid+questionNumber+(numberOfMedia).format
                    example - media file 3 for question 2 is a movie. name for that file is Qid1(3).mp4
                -user can manage media (deleting multiple, single media) and playing media.
            -'X' lets the user save their answer and close the app
            -'Back' button goes to the previous page but does NOT save their answers
            -'Next' button takes to the next question. Answers ARE saved before going to next page
            -Info button displays help attached to that question (DisplayQuestionHelp)
            -comment box is used to attach a comment for every question
        -in addition to all elements attached, an answer box specific for that type of question is also displayed
        -user has to answer the question or at least write a comment to go to the next question
            -one of the two needs to be done. cant leave both empty and skip question
        -last question does not have next question button, instead it is labelled finish edit
    -delete form
        -swipe left on incomplete form to show delete button
            -tap on delete to delete
        -all associated files with that MI is deleted (MI folder)
4. User can review the form filled
    -a table with all answers is displayed (ReviewAnswersTable)
        -number of rows in table are equal to number of questions
        -each row shows, question, comment, answer, images attached, thumbnail of video and mic image for audio
        -click on row to open question
            -edit answer
            -click back to go back and NOT save answer
            -click finish to go back and SAVE answer
    -print button is displayed to print the form (GeneratePrintPDF)
        -a pdf is generated and printed
        -needs wifi to print
        -can only print to airprint enabled printers (apple only supports these)
5. User submits 
    -MI folder is moved to completedMIs/UserFolder/
    -user is taken to the form selection view
6. User logs out
    -taken to login screen
7. Foreman logs in
    -same login process
    -if successful
        -taken to view that displays all completed forms and all incomplete forms (CheckCompletedMITable)
            -CompletedMis/ is read for all completed forms
                -displayed in one section of table
                    -click on one form to check
                        -taken to review page
                            -same as above
                        -click on Add comments
                            -foreman is allowed to add general comments of the entire form (ForemanComments)
                            -Click submit
                                -form is uploaded (UploadForm)
                                    -CompletedMis/User/form folder is deleted
            -all users folder are read for all incompleted forms
                -displayed in section
                    -swipe on form to assign to new technician
                        -popover with list of users presented (SelectNewUserToAssignFormTableView)
                            -uses ldap to get list of users (PerformLdapAuthentication)
                                -select new user
                                    -move files from Documents/User/Mi form to Documents/NewUser/Mi
                                    -form is renamed if form already exists for new user 
                                    -create error message for old user (displayed when they log in)
8. foreman logs out



How to add another question type


1. Open StoryBoard
2. Drag a new ViewController 
3. Create a new segue from 'Form SelectionView Contoller' 
    (make sure to draw segue from view controller to view controller and not ui element to view controller)
4. Select push on type of segue
5. Click on the new segue and give it a name
6. in the new view controller add the following
    These all can be copied from any other question type
    i. nav bar button 'next question button' (uibarbutton)
    ii. comment box (textview)
    iii. scroll view (uiscrollview)
        a. set the croll view class to 'TPKeyboardAvoidingScrollView'
    iv. question label (uilabel)
    v. Add any other ui objects that you might need for this question
7. Add constraints (locatin of each element with respect to the each other)
8. Create a new class for this question type
    i. make it a subclass of 'DisplayQuestionType'
9. In storyboard select the new view controller and set the class of view
    controller to the new class just created
10. Also give a storyboard ID to the new view controller
11. Draw a segue from 'Review Answers Table' to this new view controller
    i. select push as type
    ii. name it the same as previous segue
12. Draw a segue from new view controller to 'Review Answers Table'
    i. select push
    ii. name is 'ShowAnswers'
13. Add appropriate keys for this question in plist
14. update keylist to read these new keys
15. In 'NextQuestionHelp'
    i. update method getNextQuestionViewController
        a. add a new else if 
        b. the name of the view is the story board id assigned to view in step 10.
    ii. update getNextSegueName
        a. add a new else if
        b. segue name is what was assigned in step 5 and 11.ii
16. conect the following ui elements to properties in 'DisplayQuestionType'
    i. comment box to commentBoxTextField
    ii. next question button in nav bar to 'nextQuestionButton'
    iii. height constraint of question label to 'questionHeight'
    iv. question label to 'questionTextField'
    v. scroll view to 'theScrollView'
    vi. next question button action to 'nextQuestionButtonPressed'
17. Running the app and selecting a form with new question type
    should now display
    it should have - a title, media button, close, info, back, actual question filed in
18. Override the following methods in your subclass
    Overriding these methods will take care of handling all data and saving them in the main 
    template json
    i. viewDidLoad
        a. firstly call super
        b. add left swipe gesture
    ii. viewWillAppear
        a. firstly call super method
    iii. nextQuestionButtonPressed
        a. first end editing to hide keypbard
        b. second, check if user answer asnwered the question
        c. third, call [self saveAnswers]
        d. fourth, call super 
    iv. saveAnswers
        a. first create a dictionary to save the current answer
        b. call super 
    v. saveAndExit
        a. first, end editing
        b. second, call self saveAnswers
        c. third, call super
19. Need to add support for question in ReviewTableAnswers
    i. update heightForRowAtIndexPath
    ii. update getString
    iii. update cellForRowAtIndexPath
    